apiVersion: v1
kind: Namespace
metadata:
  name: order-service
  labels:
    istio-injection: enabled

---

apiVersion: v1
kind: Secret
metadata:
  name: order-secret
  namespace: order-service
type: Opaque
stringData:
  JWT_SECRET_KEY: "supersecretkey"
  DATABASE_URL: "postgresql://order_user:order_pass@order-db.order-service.svc.cluster.local:5432/order_db"
  CART_SERVICE_URL: "http://cart-service.cart-service.svc.cluster.local"
  PRODUCT_SERVICE_URL: "http://product-service.product-service.svc.cluster.local"

---
apiVersion: v1
kind: Service
metadata:
  name: order-db
  namespace: order-service
spec:
  clusterIP: None
  selector:
    app: order-db
  ports:
  - name: tcp-postgres
    port: 5432
    targetPort: 5432
    protocol: TCP

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: order-db-pvc
  namespace: order-service
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: longhorn
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: order-db
  namespace: order-service
spec:
  serviceName:
  replicas: 1
  selector:
    matchLabels:
      app: order-db
  template:
    metadata:
      labels:
        app: order-db
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values: ["order-db"]
                topologyKey: "kubernetes.io/hostname"
      tolerations:
        - key: "node.kubernetes.io/not-ready"
          operator: "Exists"
          effect: "NoExecute"
          tolerationSeconds: 60
      containers:
      - name: postgres
        image: postgres:14
        env:
        - name: POSTGRES_DB
          value: order_db
        - name: POSTGRES_USER
          value: order_user
        - name: POSTGRES_PASSWORD
          value: order_pass
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        ports:
        - containerPort: 5432
          name: tcp-posgres
        volumeMounts:
         - name: data
           mountPath: /var/lib/postgresql/data
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 1Gi

---
apiVersion: v1
kind: Service
metadata:
  name: order-service
  namespace: order-service
spec:
  selector:
    app: order
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 5000
    - name: http-int
      protocol: TCP
      port: 5000
      targetPort: 5000
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-deployment
  namespace: order-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: order
  template:
    metadata:
      annotations:
        traffic.sidecar.istio.io/includeInboundPorts: "80,5000"
      labels:
        app: order
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - order
                topologyKey: "kubernetes.io/hostname"
      tolerations:
        - key: "node.kubernetes.io/not-ready"
          operator: "Exists"
          effect: "NoExecute"
          tolerationSeconds: 60
      containers:
      - name: order
        image: juidas/order-service:v1.0.8
        ports:
        - containerPort: 5000
          name: http
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: order-secret
              key: DATABASE_URL
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: order-secret
              key: JWT_SECRET_KEY
        - name: CART_SERVICE_URL
          valueFrom:
            secretKeyRef:
              name: order-secret
              key: CART_SERVICE_URL
        - name: PRODUCT_SERVICE_URL
          valueFrom:
            secretKeyRef:
              name: order-secret
              key: PRODUCT_SERVICE_URL

